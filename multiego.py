import os
import pandas as pd
import sys, getopt
from read_input import read_pdbs, plainMD_mdmat, random_coil_mdmat, read_topology_atoms, read_topology_bonds
from write_output import write_LJ, write_atomtypes_atp, write_topology, write_ligand_topology
from greta import make_pairs_exclusion_topology, PDB_LJ_pairs, MD_LJ_pairs, merge_and_clean_LJ, make_pdb_atomtypes, make_more_atomtypes, topology_check
from topology_parser import read_topology, topology_atoms, topology_bonds, topology_ligands
from greta import ensemble, sb_type_conversion
pd.options.mode.chained_assignment = None  # default='warn'

def main(argv):

    parameters = {
        #
        'distance_cutoff':5.5,
        #
        'distance_residue':2,
        #
        'ratio_threshold':0.001,
        # Settings for LJ 1-4. We introduce some LJ interactions otherwise lost with the removal of explicit H
        # The c12 of a LJ 1-4 is too big, therefore we reduce by a factor
        'lj_reduction':0.15,
        # For left alpha we might want to increase the c6 values
        'multiply_c6':1.5,
        # Acid FFnonbondend it only works on the native pairs
        'acid_ff':False,
        #
        'ensemble':True,
        #
        'ligand':False
        # The following parameters are added later from input arguments
        # protein:
        # egos:
        # epsilon_input:
        # epsilon_structure:
        # epsilon_md:
        # input_folder:
        # output_folder:
    }

    print('\n\nMulti-eGO (codename: GRETA)\n')

    readall=0

    try:
        opts, args = getopt.getopt(argv,"",["protein=","egos=","epsilon=", "ligand", "noensemble","help"])
    except getopt.GetoptError:
        print('multiego.py --protein <protein> --egos <single|merge|rc> --epsilon=0.x (not used with --egos=rc) --noensemble (optional)')
        sys.exit(2)
    for opt, arg in opts:
        if opt == '--help':
            print('multiego.py --protein <protein> --egos <single|merge|rc> --epsilon=0.x (not used with --egos=rc) --noensemble (optional)')
            sys.exit()
        elif opt in ("--protein"):
            if not arg:
                print('Provide a protein name')
                sys.exit()
            else:
                parameters['protein'] = arg
                readall +=1
        elif opt in ("--egos"):
            if arg in ('single', 'merge', 'rc'):
                parameters['egos'] = arg
                if arg == 'rc':
                    readall +=2
                else:
                    readall +=1
            else:
                print('--egos accepts <single|merge|rc> options')
                sys.exit()

        elif opt in ("--epsilon"):
            arg = float(arg)
            if arg > 1 or arg < 0:
                print('Epsilon values must be chosen between 0 and 1')
                sys.exit()
            else:
                parameters['epsilon_input'] = float(arg)
                parameters['epsilon_structure'] = float(arg)
                parameters['epsilon_md'] = float(arg)
                readall +=1
        elif opt in ("--ligand"):
            parameters['ligand'] = True
        
        elif opt in ("--noensemble"):
            parameters['ensemble'] = False 
  
    if readall != 3:
        print('ERROR: missing input argument')
        print('multiego.py --protein <protein> --egos <single|merge|rc> --epsilon=0.x (not used with --egos=rc) --noensemble (optional)' )
        exit()

    parameters['input_folder'] = f"inputs/{parameters['protein']}" 
 
    # Folders to save the output files generated by the script
    if parameters['egos'] == 'rc':
        parameters['output_folder'] = f"outputs/{parameters['protein']}_{parameters['egos']}"
    else:
        parameters['output_folder'] = f"outputs/{parameters['protein']}_{parameters['egos']}_e{parameters['epsilon_input']}"

    print('- Creating a multi-eGO force-field using the following parameters:')
    for k,v in parameters.items():
        print('\t{:<20}: {:<20}'.format(k,v))
    
    try:
        os.mkdir(parameters['output_folder'])
    except OSError as error:
        pass

    print('- reading TOPOLOGY')
    print('\tReading ', f'{parameters["input_folder"]}/topol.top')

    # Here needed for writing the topology, to remove asap
    top = read_topology(f'{parameters["input_folder"]}/topol.top')

    #print('- reading PDB')
    #native_pdb = read_pdbs(parameters, False)
    
    #if parameters['egos'] == 'merge':
    #    fibril_pdb = read_pdbs(parameters, True)

    #print('- Generating Atomtypes')
    
    #if parameters['egos'] == 'merge':
    #    fibril_atomtypes = make_more_atomtypes(fibril_pdb)

    #print('- Generating LJ Interactions')

    if parameters['egos'] == 'rc': # Ensemble done, to check
        '''
        Reading the native ensemble from pdb2gmx using multi-ego-basic.ff
        This setup is to get the ffnonbonded without pairs to perform an RC simulation
        '''
        ego_native_parameters = {
            'topology_file':f"{parameters['input_folder']}/topol.top",
            'structure_file': f"{parameters['input_folder']}/native.pdb",
            'get_structure_pairs':False,
            'is_MD':False,
            'not_matching_native':False,
            'use_RC':False,
            'get_pairs_exclusions':True
        }

        print('- Preparing the random coil ensemble')
        ego_native = ensemble(parameters=parameters, ensemble_parameters=ego_native_parameters)
        write_atomtypes_atp(ego_native.atomtypes_atp, parameters)
        write_LJ(ego_native.ffnonbonded_atp, parameters)
        print('- Generating Pairs and Exclusions')
        write_topology(parameters, top, ego_native)

    elif parameters['egos'] == 'single': # Ensemble done, to check
        if parameters['ensemble'] == True:
            ego_native_parameters = {
                'topology_file':f"{parameters['input_folder']}/topol.top",
                'structure_file': f"{parameters['input_folder']}/native.pdb",
                'get_structure_pairs':False,
                'is_MD':False,
                'not_matching_native':False,
                'use_RC':True,
                'get_pairs_exclusions':True
            }

            ego_md_parameters = {
                'topology_file':f"{parameters['input_folder']}/topol_md.top",
                'structure_file': f"{parameters['input_folder']}/native_md.pdb",
                'get_structure_pairs':False,
                'is_MD':True,
                'not_matching_native':False,
                'use_RC':False,
                'get_pairs_exclusions':True
            }
            
            ego_native = ensemble(parameters = parameters, ensemble_parameters=ego_native_parameters)
            ego_md = ensemble(parameters = parameters, ensemble_parameters=ego_md_parameters)
            # Topologies conversion
            atomic_mat_plainMD, ts2multiego_dict = sb_type_conversion(ego_native, ego_md)
            print(f'- The following contacts were converted: {ts2multiego_dict}')
            greta_LJ = MD_LJ_pairs(atomic_mat_plainMD, ego_native.atomic_mat_random_coil, parameters)
        
        else:

            ego_native_parameters = {
                'topology_file':f"{parameters['input_folder']}/topol.top",
                'structure_file': f"{parameters['input_folder']}/native.pdb",
                'get_structure_pairs':True,
                'is_MD':False,
                'not_matching_native':False,
                'use_RC':False,
                'get_pairs_exclusions':True
            }

            ego_native = ensemble(parameters = parameters, ensemble_parameters=ego_native_parameters)
            write_atomtypes_atp(ego_native.atomtypes_atp, parameters)
            atomic_mat_random_coil = random_coil_mdmat(parameters)
            greta_LJ = ego_native.structure_pairs
            if parameters['acid_ff'] == True and top.acid_atp !=0:
                    greta_LJ = greta_LJ[~greta_LJ.ai.isin(top.acid_atp)]
                    greta_LJ = greta_LJ[~greta_LJ.aj.isin(top.acid_atp)]

    elif parameters['egos'] == 'merge':
        if parameters['ensemble'] == True:

            ego_native_parameters = {
                'topology_file':f"{parameters['input_folder']}/topol.top",
                'structure_file': f"{parameters['input_folder']}/native.pdb",
                'get_structure_pairs':False,
                'is_MD':False,
                'not_matching_native':False,
                'use_RC':True,
                'get_pairs_exclusions':True
            }
            ego_native = ensemble(parameters = parameters, ensemble_parameters=ego_native_parameters)
            
            ego_md_parameters = {
                'topology_file':f"{parameters['input_folder']}/topol_md.top",
                'structure_file': f"{parameters['input_folder']}/native_md.pdb",
                'get_structure_pairs':False,
                'is_MD':True,
                'not_matching_native':False,
                'use_RC':False,
                'get_pairs_exclusions':False
            }
            ego_md = ensemble(parameters = parameters, ensemble_parameters=ego_md_parameters)
            
            ego_fibril_parameters = {
                'topology_file':f"{parameters['input_folder']}/fibril_temp/topol.top",
                'structure_file': f"{parameters['input_folder']}/fibril_temp/fibril.pdb",
                'get_structure_pairs':True,
                'is_MD':False,
                'not_matching_native':ego_native,
                'use_RC':False,
                'get_pairs_exclusions':False
            }
            ego_fibril = ensemble(parameters = parameters, ensemble_parameters=ego_fibril_parameters)

            # Topologies conversion
            atomic_mat_plainMD, ts2multiego_dict = sb_type_conversion(ego_native, ego_md)
            print(f'\t\tThe following contacts were converted: {ts2multiego_dict}')

            greta_LJ = MD_LJ_pairs(atomic_mat_plainMD, ego_native.atomic_mat_random_coil, parameters)
            greta_LJ = pd.concat([greta_LJ,ego_fibril.structure_pairs], axis=0, sort = False, ignore_index = True)
        
        else:
            ego_native_parameters = {
                'topology_file':f"{parameters['input_folder']}/topol.top",
                'structure_file': f"{parameters['input_folder']}/native.pdb",
                'get_structure_pairs':False,
                'is_MD':False,
                'not_matching_native':False,
                'use_RC':True,
                'get_pairs_exclusions':True
            }
            ego_native = ensemble(parameters = parameters, ensemble_parameters=ego_native_parameters)
            
            ego_fibril_parameters = {
                'topology_file':f"{parameters['input_folder']}/fibril_temp/topol.top",
                'structure_file': f"{parameters['input_folder']}/fibril_temp/fibril.pdb",
                'get_structure_pairs':True,
                'is_MD':False,
                'not_matching_native':ego_native.sbtype_idx_dict,
                'use_RC':False,
                'get_pairs_exclusions':False
            }

            ego_fibril = ensemble(parameters = parameters, ensemble_parameters=ego_fibril_parameters)
            greta_LJ = ego_native.structure_pairs
            if parameters['acid_ff'] == True and top.acid_atp !=0:
                    greta_LJ = greta_LJ[~greta_LJ.ai.isin(top.acid_atp)]
                    greta_LJ = greta_LJ[~greta_LJ.aj.isin(top.acid_atp)]
            greta_LJ = pd.concat([greta_LJ,ego_fibril.structure_pairs], axis=0, sort = False, ignore_index = True)

    else: # one should never get here
        print("I dont' understand --egos=",parameters['egos'])
        exit()

    if parameters['egos'] != 'rc':
        print('- Finalising LJ interactions')
        greta_ffnb = merge_and_clean_LJ(greta_LJ, parameters)
        write_LJ(atomtypes = ego_native.ffnonbonded_atp, greta_LJ = greta_ffnb, parameters = parameters)

        print('- Generating Pairs and Exclusions')
        write_topology(parameters, top, ego_native)

        if parameters['ligand'] == True:
            write_ligand_topology(parameters, top_ligand)

    print('- Force-Field files saved in ' + parameters['output_folder'])
    print('\nGRETA completed! Carlo is happy\n')


if __name__ == "__main__":
   main(sys.argv[1:])
